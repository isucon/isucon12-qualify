// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: isuxportal/services/bench/receiving.proto

package bench

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BenchmarkQueueClient is the client API for BenchmarkQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkQueueClient interface {
	ReceiveBenchmarkJob(ctx context.Context, in *ReceiveBenchmarkJobRequest, opts ...grpc.CallOption) (*ReceiveBenchmarkJobResponse, error)
	CancelOwnedBenchmarkJob(ctx context.Context, in *CancelOwnedBenchmarkJobRequest, opts ...grpc.CallOption) (*CancelOwnedBenchmarkJobResponse, error)
}

type benchmarkQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkQueueClient(cc grpc.ClientConnInterface) BenchmarkQueueClient {
	return &benchmarkQueueClient{cc}
}

func (c *benchmarkQueueClient) ReceiveBenchmarkJob(ctx context.Context, in *ReceiveBenchmarkJobRequest, opts ...grpc.CallOption) (*ReceiveBenchmarkJobResponse, error) {
	out := new(ReceiveBenchmarkJobResponse)
	err := c.cc.Invoke(ctx, "/isuxportal.proto.services.bench.BenchmarkQueue/ReceiveBenchmarkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkQueueClient) CancelOwnedBenchmarkJob(ctx context.Context, in *CancelOwnedBenchmarkJobRequest, opts ...grpc.CallOption) (*CancelOwnedBenchmarkJobResponse, error) {
	out := new(CancelOwnedBenchmarkJobResponse)
	err := c.cc.Invoke(ctx, "/isuxportal.proto.services.bench.BenchmarkQueue/CancelOwnedBenchmarkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkQueueServer is the server API for BenchmarkQueue service.
// All implementations must embed UnimplementedBenchmarkQueueServer
// for forward compatibility
type BenchmarkQueueServer interface {
	ReceiveBenchmarkJob(context.Context, *ReceiveBenchmarkJobRequest) (*ReceiveBenchmarkJobResponse, error)
	CancelOwnedBenchmarkJob(context.Context, *CancelOwnedBenchmarkJobRequest) (*CancelOwnedBenchmarkJobResponse, error)
	mustEmbedUnimplementedBenchmarkQueueServer()
}

// UnimplementedBenchmarkQueueServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkQueueServer struct {
}

func (UnimplementedBenchmarkQueueServer) ReceiveBenchmarkJob(context.Context, *ReceiveBenchmarkJobRequest) (*ReceiveBenchmarkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveBenchmarkJob not implemented")
}
func (UnimplementedBenchmarkQueueServer) CancelOwnedBenchmarkJob(context.Context, *CancelOwnedBenchmarkJobRequest) (*CancelOwnedBenchmarkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOwnedBenchmarkJob not implemented")
}
func (UnimplementedBenchmarkQueueServer) mustEmbedUnimplementedBenchmarkQueueServer() {}

// UnsafeBenchmarkQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkQueueServer will
// result in compilation errors.
type UnsafeBenchmarkQueueServer interface {
	mustEmbedUnimplementedBenchmarkQueueServer()
}

func RegisterBenchmarkQueueServer(s grpc.ServiceRegistrar, srv BenchmarkQueueServer) {
	s.RegisterService(&BenchmarkQueue_ServiceDesc, srv)
}

func _BenchmarkQueue_ReceiveBenchmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveBenchmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkQueueServer).ReceiveBenchmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isuxportal.proto.services.bench.BenchmarkQueue/ReceiveBenchmarkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkQueueServer).ReceiveBenchmarkJob(ctx, req.(*ReceiveBenchmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkQueue_CancelOwnedBenchmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOwnedBenchmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkQueueServer).CancelOwnedBenchmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isuxportal.proto.services.bench.BenchmarkQueue/CancelOwnedBenchmarkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkQueueServer).CancelOwnedBenchmarkJob(ctx, req.(*CancelOwnedBenchmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BenchmarkQueue_ServiceDesc is the grpc.ServiceDesc for BenchmarkQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchmarkQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isuxportal.proto.services.bench.BenchmarkQueue",
	HandlerType: (*BenchmarkQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveBenchmarkJob",
			Handler:    _BenchmarkQueue_ReceiveBenchmarkJob_Handler,
		},
		{
			MethodName: "CancelOwnedBenchmarkJob",
			Handler:    _BenchmarkQueue_CancelOwnedBenchmarkJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isuxportal/services/bench/receiving.proto",
}
